// <auto-generated />
using System;
using Esports_Org_Manager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Esports_Org_Manager.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240613144128_Contracts")]
    partial class Contracts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.5.24306.3");

            modelBuilder.Entity("Esports_Org_Manager.Models.ContractModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isRenegotiable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("membershipId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("signDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("validityPeriod")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("membershipId");

                    b.ToTable("Contracts", (string)null);
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.MembershipModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("teamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("teamId");

                    b.ToTable("Memberships", (string)null);
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.OrganizationModel", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("name");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.TeamModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("minimalAgeEligibility")
                        .HasColumnType("INTEGER");

                    b.Property<int>("minimalNumberOfPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("organizationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("organizationName");

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.ContractModel", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.MembershipModel", "membership")
                        .WithMany("contracts")
                        .HasForeignKey("membershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("membership");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.MembershipModel", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.TeamModel", "team")
                        .WithMany("memberships")
                        .HasForeignKey("teamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("team");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.TeamModel", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.OrganizationModel", "organization")
                        .WithMany("teams")
                        .HasForeignKey("organizationName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("organization");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.MembershipModel", b =>
                {
                    b.Navigation("contracts");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.OrganizationModel", b =>
                {
                    b.Navigation("teams");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.TeamModel", b =>
                {
                    b.Navigation("memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
