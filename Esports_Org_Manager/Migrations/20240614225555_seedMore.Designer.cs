// <auto-generated />
using System;
using Esports_Org_Manager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Esports_Org_Manager.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240614225555_seedMore")]
    partial class seedMore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.5.24306.3");

            modelBuilder.Entity("EmployeeTourneysCasters", b =>
                {
                    b.Property<int>("castersid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tourneyCastsid")
                        .HasColumnType("INTEGER");

                    b.HasKey("castersid", "tourneyCastsid");

                    b.HasIndex("tourneyCastsid");

                    b.ToTable("EmployeeTourneysCasters");
                });

            modelBuilder.Entity("EmployeeTourneysOrganised", b =>
                {
                    b.Property<int>("ownOrganizersid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tourneyParticipationsid")
                        .HasColumnType("INTEGER");

                    b.HasKey("ownOrganizersid", "tourneyParticipationsid");

                    b.HasIndex("tourneyParticipationsid");

                    b.ToTable("EmployeeTourneysOrganised");
                });

            modelBuilder.Entity("EmployeesPlayTourneys", b =>
                {
                    b.Property<int>("teamsid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tourneysPlayedid")
                        .HasColumnType("INTEGER");

                    b.HasKey("teamsid", "tourneysPlayedid");

                    b.HasIndex("tourneysPlayedid");

                    b.ToTable("EmployeesPlayTourneys");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.ContractModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isRenegotiable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("membershipId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("signDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("validityPeriod")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("membershipId");

                    b.ToTable("Contracts", (string)null);
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.EmployeeModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("adress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("channels")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("employeeTypeDiscriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nick")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("numberOfHoursStreamingPerWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("numberOfVideosPerWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("organizationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("placementBonuses")
                        .HasColumnType("TEXT");

                    b.Property<int?>("procentageOfWinnings")
                        .HasColumnType("INTEGER");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("wage")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.HasIndex("organizationName");

                    b.ToTable("Employees", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            adress = "{\"cityName\":\"Paris\",\"streetName\":\"d'trance\",\"number\":23}",
                            email = "jan.kajszczak@gmail.com",
                            employeeTypeDiscriminator = "Player",
                            lastName = "Touret",
                            name = "Axel",
                            nick = "Vatira",
                            organizationName = "karmine corp",
                            procentageOfWinnings = 23,
                            status = "available",
                            wage = 1200.0
                        },
                        new
                        {
                            id = 2,
                            adress = "{\"cityName\":\"Lisbon\",\"streetName\":\"R. Luis Monteiro\",\"number\":4}",
                            email = "jan.kajszczak@gmail.com",
                            employeeTypeDiscriminator = "Player",
                            lastName = "Ferguson",
                            name = "Finley",
                            nick = "Rise",
                            organizationName = "karmine corp",
                            procentageOfWinnings = 25,
                            status = "available",
                            wage = 1120.0
                        },
                        new
                        {
                            id = 3,
                            adress = "{\"cityName\":\"Brussels\",\"streetName\":\"Rue Emile Steeno\",\"number\":12}",
                            email = "jan.kajszczak@gmail.com",
                            employeeTypeDiscriminator = "Player",
                            lastName = "Soyez",
                            name = "Tristan",
                            nick = "Atow",
                            organizationName = "karmine corp",
                            procentageOfWinnings = 25,
                            status = "unavailable",
                            wage = 1120.0
                        });
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.IndependentContractorModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("price")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.ToTable("IndependentContractors", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            email = "MVL@gmail.com",
                            name = "MVL sp z.o.o",
                            price = 23000.0
                        });
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.MembershipModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("employeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("teamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.HasIndex("teamId");

                    b.ToTable("Memberships", (string)null);
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.OrganizationModel", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("name");

                    b.ToTable("Organizations", (string)null);

                    b.HasData(
                        new
                        {
                            name = "karmine corp",
                            creationDate = new DateTime(2012, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            logo = "\\Esports_Org_Manager\\Logos\\karmine-corp-2021.png"
                        },
                        new
                        {
                            name = "moist esports",
                            creationDate = new DateTime(2018, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            logo = "\\Esports_Org_Manager\\Logos\\mst.jpg"
                        });
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.TeamModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("gamePlayed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("logo")
                        .HasColumnType("TEXT");

                    b.Property<int>("minimalAgeEligibility")
                        .HasColumnType("INTEGER");

                    b.Property<int>("minimalNumberOfPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("organizationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("organizationName");

                    b.ToTable("Teams", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            creationDate = new DateTime(2019, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            gamePlayed = "rocket league",
                            minimalAgeEligibility = 16,
                            minimalNumberOfPlayers = 3,
                            name = "mst rl",
                            organizationName = "moist esports",
                            region = "NA"
                        },
                        new
                        {
                            id = 2,
                            creationDate = new DateTime(2020, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            gamePlayed = "valorant",
                            minimalAgeEligibility = 16,
                            minimalNumberOfPlayers = 5,
                            name = "mst valo",
                            organizationName = "moist esports",
                            region = "NA"
                        },
                        new
                        {
                            id = 3,
                            creationDate = new DateTime(2015, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            gamePlayed = "valorant",
                            minimalAgeEligibility = 16,
                            minimalNumberOfPlayers = 5,
                            name = "kc rant",
                            organizationName = "moist esports",
                            region = "NA"
                        });
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.TourneyModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("adress")
                        .HasColumnType("TEXT");

                    b.Property<double>("awardPool")
                        .HasColumnType("REAL");

                    b.Property<string>("competitionType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("format")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("independentOrganizerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("organizerDiscriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("procentPerPlace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("streamLinks")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ticketPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("viewTypeDiscriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("independentOrganizerId");

                    b.ToTable("Tourneys", (string)null);

                    b.HasDiscriminator<string>("competitionType").HasValue("TourneyModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TeamsPlayTourneys", b =>
                {
                    b.Property<int>("teamsid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tourneysid")
                        .HasColumnType("INTEGER");

                    b.HasKey("teamsid", "tourneysid");

                    b.HasIndex("tourneysid");

                    b.ToTable("TeamsPlayTourneys");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.SoloTourneyModel", b =>
                {
                    b.HasBaseType("Esports_Org_Manager.Models.TourneyModel");

                    b.Property<bool>("allowCoaching")
                        .HasColumnType("INTEGER");

                    b.Property<string>("placements")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Tourneys", t =>
                        {
                            t.Property("placements")
                                .HasColumnName("SoloTourneyModel_placements");
                        });

                    b.HasDiscriminator().HasValue("solo");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.TeamTourneyModel", b =>
                {
                    b.HasBaseType("Esports_Org_Manager.Models.TourneyModel");

                    b.Property<string>("placements")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("playerChangePointsPenalty")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("team");

                    b.HasData(
                        new
                        {
                            id = 1,
                            adress = "{\"cityName\":\"Kopenhagen\",\"streetName\":\"Sankt Gertruds\",\"number\":12}",
                            awardPool = 200000.0,
                            date = new DateTime(2024, 5, 26, 0, 55, 45, 624, DateTimeKind.Local).AddTicks(9651),
                            format = "NFL",
                            independentOrganizerId = 1,
                            name = "Summer champions",
                            organizerDiscriminator = "Independent",
                            procentPerPlace = "[50,30,20]",
                            state = "Finished",
                            ticketPrice = 120.0,
                            viewTypeDiscriminator = "[\"Offlie\"]",
                            placements = "{}",
                            playerChangePointsPenalty = 12
                        });
                });

            modelBuilder.Entity("EmployeeTourneysCasters", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.EmployeeModel", null)
                        .WithMany()
                        .HasForeignKey("castersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esports_Org_Manager.Models.TourneyModel", null)
                        .WithMany()
                        .HasForeignKey("tourneyCastsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeTourneysOrganised", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.EmployeeModel", null)
                        .WithMany()
                        .HasForeignKey("ownOrganizersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esports_Org_Manager.Models.TourneyModel", null)
                        .WithMany()
                        .HasForeignKey("tourneyParticipationsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeesPlayTourneys", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.EmployeeModel", null)
                        .WithMany()
                        .HasForeignKey("teamsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esports_Org_Manager.Models.SoloTourneyModel", null)
                        .WithMany()
                        .HasForeignKey("tourneysPlayedid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.ContractModel", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.MembershipModel", "membership")
                        .WithMany("contracts")
                        .HasForeignKey("membershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("membership");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.EmployeeModel", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.OrganizationModel", "organization")
                        .WithMany("employees")
                        .HasForeignKey("organizationName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("organization");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.MembershipModel", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.EmployeeModel", "employee")
                        .WithMany("memberships")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esports_Org_Manager.Models.TeamModel", "team")
                        .WithMany("memberships")
                        .HasForeignKey("teamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("team");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.TeamModel", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.OrganizationModel", "organization")
                        .WithMany("teams")
                        .HasForeignKey("organizationName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("organization");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.TourneyModel", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.IndependentContractorModel", "independentOrganizer")
                        .WithMany("tourneys")
                        .HasForeignKey("independentOrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("independentOrganizer");
                });

            modelBuilder.Entity("TeamsPlayTourneys", b =>
                {
                    b.HasOne("Esports_Org_Manager.Models.TeamModel", null)
                        .WithMany()
                        .HasForeignKey("teamsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esports_Org_Manager.Models.TeamTourneyModel", null)
                        .WithMany()
                        .HasForeignKey("tourneysid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.EmployeeModel", b =>
                {
                    b.Navigation("memberships");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.IndependentContractorModel", b =>
                {
                    b.Navigation("tourneys");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.MembershipModel", b =>
                {
                    b.Navigation("contracts");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.OrganizationModel", b =>
                {
                    b.Navigation("employees");

                    b.Navigation("teams");
                });

            modelBuilder.Entity("Esports_Org_Manager.Models.TeamModel", b =>
                {
                    b.Navigation("memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
